---
import { links } from '../lib/nav';
import HamburgerIcon from './icons/HamburgerIcon.astro';
import LedgerIcon from './icons/LedgerIcon.astro';

interface Props {
	minimal?: boolean
}

const { minimal } = Astro.props;
---

<div class="grid grid-rows-[2rem] w-full sm:hidden">
	{
		!minimal && (
			<a href="/" class="text-text row-start-1 flex flex-row items-center gap-1">
				<LedgerIcon class="h-5/6 -ml-0.5" />
				<p class="text-h5">heftymouse</p>
			</a>
		)
	}
	<button id="mobileNavButton" class="row-start-1 justify-self-end -mr-3 border-none bg-transparent">
		<HamburgerIcon class="h-full stroke-text" />
	</button>
</div>
<nav id="mobileNav" class="absolute left-0 top-0 h-screen w-full backdrop-blur-md bg-neutral-600 bg-opacity-10 sm:hidden" hidden>
	<div class="w-fit mt-8 ml-auto mr-6 bg-background p-2 min-w-32 rounded-md border border-control-stroke">
		<ul class="flex flex-col">
			{
				Object.entries(links).map((e, i) => (
					<li class="ml-2 flex flex-col">
						<a
							href={e[1]}
							class="flex flex-row items-center p-2 text-text hover:no-underline"
							class:list={[
								{
									'nav-selected-vertical': e[1].substring(1) === Astro.url.pathname.split('/')[1]
								}
							]}
						>
							{e[0]}
						</a>
					</li>
				))
			}
		</ul>
	</div>
</nav>

<style>
.nav-selected-vertical {
    margin-left: -12px;
    &::before {
      display: block;
      content: '';
      width: 4px;
      height: 1.2rem;
      margin-right: 8px;
      background: var(--accentFill);
      border-radius: 9999px;
    }
}
</style>

<script>
	document.querySelector('#mobileNavButton')?.addEventListener('click', () => {
		(document.querySelector('#mobileNav') as HTMLElement).hidden = false;
	});

	document.querySelector('#mobileNav')?.addEventListener('click', (e) => {
		if (e.target === e.currentTarget) {
			(e.currentTarget as HTMLElement).hidden = true;
		}
	});
</script>
